inputs:
  token:
    description: 'GitHub token'
    required: false
outputs:
  remaining:
    description: 'The remaining rate limit after running the action'
    value: ${{ steps.calc_rate_limit.outputs.remaining }}
runs:
  using: 'composite'
  steps:
    - name: Get PR for commit
      id: get-pr
      uses: actions/github-script@v5
      with:
        script: |
          const { owner, repo } = context.repo
          const sha = github.sha
          console.log(`Repo: ${owner}/${repo}`)
          console.log(`SHA: ${sha}`)
          const { data: pullRequests } = await github.rest.pulls.list({
            owner,
            repo,
            state: 'open',
          })
          console.log(`Pull requests: ${JSON.stringify(pullRequests, null, 2)}`)
          const pullRequest = pullRequests.find(pr => pr.head.sha === sha)
          console.log(`Matched PR: ${JSON.stringify(pullRequest, null, 2)}`)
          return pullRequest ? pullRequest.number : null
    - name: Print PR number
      run: |
        echo "PR number: ${{ steps.get-pr.outputs.result }}"
      shell: bash
    - name: Checkout
      uses: actions/checkout@v3
    - name: Install jq
      run: |
        if ! command -v jq &> /dev/null
        then
          sudo apt install -y jq
        fi
      shell: bash

    - name: Calculate rate Limit
      id: calc_rate_limit
      run: |
        chmod +x ratelimit.sh
        ./ratelimit.sh "${{ inputs.token }}"
      shell: bash

    - name: Print remaining rate limit
      run: |
        echo "Remaining rate limit: ${{ steps.calc_rate_limit.outputs.remaining }} :rocket:" >> $GITHUB_STEP_SUMMARY
      shell: bash

    - name: Post comment on PR
      uses: actions/github-script@v5
      with:
        script: |
          const prNumber = ${{ steps.get-pr.outputs.result }}
          if (prNumber) {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              body: 'Remaining rate limit: ${{ steps.calc_rate_limit.outputs.remaining }} :rocket:'
            })
          }
