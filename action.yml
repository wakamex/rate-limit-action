name: "check GitHub rate limit"
inputs:
  token:
    description: "GitHub token"
    required: false
  sha:
    description: "The SHA of the commit that triggered the workflow"
    required: false
  post_comment:
    description: "Whether to post a comment on the PR with the remaining rate limit"
    required: false
    default: false
outputs:
  remaining:
    description: "The remaining rate limit after running the action"
    value: ${{ steps.calc_rate_limit.outputs.remaining }}
runs:
  using: "composite"
  steps:
    - name: Get PR for commit
      if: ${{ inputs.post_comment == 'true' }}
      id: get-pr
      uses: actions/github-script@v6
      with:
        script: |
          const { owner, repo } = context.repo
          let sha = '${{ inputs.sha }}'
          if (!sha && context.payload.pull_request) { sha = context.payload.pull_request.head.sha }
          if (!sha) { sha = context.sha }
          const { data: pullRequests } = await github.rest.pulls.list({
            owner,
            repo,
            state: 'open',
          })
          const pullRequest = pullRequests.find(pr => pr.head.sha === sha)
          return pullRequest ? pullRequest.number : null
    - name: Print PR number
      if: ${{ inputs.post_comment == 'true' }}
      run: |
        echo "PR number: ${{ steps.get-pr.outputs.result }}"
      shell: bash
    - name: Checkout
      uses: actions/checkout@v3
    - name: Install jq
      run: |
        if ! command -v jq &> /dev/null
        then
          apt install -y jq
        fi
      shell: bash

    - name: Calculate rate Limit
      id: calc_rate_limit
      run: |
        chmod +x "${{ github.workspace }}/ratelimit.sh"
        "${{ github.workspace }}/ratelimit.sh" "${{ inputs.token }}"
      shell: bash

    - name: Print remaining rate limit
      run: |
        echo "Remaining rate limit: ${{ steps.calc_rate_limit.outputs.remaining }} :rocket:" >> $GITHUB_STEP_SUMMARY
      shell: bash

    - name: Post comment on PR
      if: ${{ inputs.post_comment == 'true' }}
      uses: actions/github-script@v5
      with:
        script: |
          const prNumber = ${{ steps.get-pr.outputs.result }}
          if (prNumber) {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              body: 'Remaining rate limit: ${{ steps.calc_rate_limit.outputs.remaining }} :rocket:'
            })
          }
